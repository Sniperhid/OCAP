Source for tutorial on generating .emf file: https://community.bistudio.com/wiki/ArmA:_Cheats#TOPOGRAPHY

This guide assumes you have the program OSGeo4W installed.
(https://trac.osgeo.org/osgeo4w/)

1. 	Run Arma 3 as Administrator (right click on arma3.exe > Run as administrator).

2. 	Open desired map in 2D editor (does not work in 3D editor).
	Note: 2D editor can be accessed by pressing Shift + O on map selection screen.

3. 	Press Left Shift + Numpad Minus (-).
	Release both keys and then blindly type EXPORTNOGRID (or TOPOGRAPHY if map grid wanted).
	An "Activated EXPORTNOGRID" message should (very briefly) appear. The islands you can install through the admin panel use EXPORTNOGRID.

4.	Go to C:\ and check for <worldname>.emf. If no file is found, make sure you followed step 1.
 	Close Arma 3 (important).

5. 	Download BI Tools (https://community.bistudio.com/wiki/BI_Tools_2.5)
	and locate EmfToPng.exe  (in Visitor 3 folder).
	Copy EmfToPng.exe to a place you have write access (without need to run as administrator).

6. 	Copy <worldname>.emf (from step 4) to same folder as where we just copied EmfToPng.exe.
	Create a shortcut of EmfToPng.exe that launches with arguments: <worldname>.emf N
	
	N is the zoom level. We want to find the N which results in an image with dimensions that adheres to
	the tile size chart (see below). This may take some experimenting and will vary between maps.
	N is usually somewhere between 0.1 and 2. The recommended target is 16384 - This leads to a png of 16384 by 16384 pixels.
	If you can open the EMF file directly to get the pixels the dimensions should both be the same size. You can calculate N by using the formula  N= 16384/<pixel_dimension>. Where 16384 is the target size of the PNG. and <pixel_dimension> is the length of a dimension in the EMF file.
	E.g. If the EMF is 20480 by 20480, 16384/20480 = 0.8 = N
	If the EMF file is not the same length in both dimensions you will need to edit the EMF to make it them the same before doing the png conversion. Alternatively you can edit the PNG post conversion to make the dimensions identical.
	
	Note: The resulting image dimensions (both X and Y) must adhere *exactly* to the tile size chart (at the end of this page).

7. 	Run shortcut and wait until .emf is converted to a .png

8. 	Drag and drop <worldname>.png into OSGeo4W64 directory.
	Launch OSGeo4W64.bat and enter the followig command:
	gdal2tiles_legacy_no-tms -p raster -z 0-6 -w all <worldname>.png
	(assuming your image size is 16384 - zoom level 6)

	Note: gdal2tiles_legacy_no-tms is a modified version of gdal2tiles.
	To install, just drag the included gdal2tiles_legacy_no-tms .py and .bat
	files into OSGeo4W64\bin\.
	
	Note: Un the output folder \<worldname> there is a file called openlayers.html You can open this to preview the terrain.
	Note: This tool is broken and will display the tiles in the incorrect order. But as long as you see tiles it should be working.
	
If you wish to submit your tileset to be added to the OCAP map repository, please archive the folder
into a .tar file and upload somewhere (e.g. Dropbox). Ensure the name of the folder matches the
engine name of the terrain, this should be the name the engine uses (see end of document for how to retrieve these). Then please file a ticket on the github tracker:
https://github.com/mistergoodson/OCAP/issues
Please also include details on:
	- World engine name (e.g. stratis)
	- World display name (e.g. Stratis)
	- Image size (size of image used to create tiles, e.g. 16384)
	- World size (size of image when N=1) - This should be the length of the dimensions of the EMF file. This usually is the  with the value worldSize command in Arma but in somecases may be a pixel off.
	- Multiplier (value of N)

// Tile size chart
Zoom Level    Pixel size
0             256
1             512
2             1024
3             2048
4             4096
5             8192
6             16384
7             32768
8             65536


// Code you can run in the Arma 3 debug console to extract the fileName versus displayName for islands that are currently loaded.

worldArray = [];
{
	_x = configFile >> "CfgWorlds" >> (configName _x);
	worldArray pushBack [configName _x, getText (_x >> "description")];
} forEach ("true" configClasses (configFile >> "CfgWorldList");
copyToClipBoard str worldArray;

// Example output - To get the worldsize. Open the island in the 3D editor and open the debug console use the command 'worldSize' to retrieve the worldsize.
// Engine name, Island display name
["Intro","Rahmadi"]
